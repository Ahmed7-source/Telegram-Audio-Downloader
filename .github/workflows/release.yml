name: 🚀 Release Workflow

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Is this a pre-release?'
        required: false
        type: boolean
        default: false

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 🔢 Extract Version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            TAG="v${VERSION}"
          else
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT
          echo "Release version: ${VERSION}"
          echo "Release tag: ${TAG}"
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          pip install -r requirements.txt
      
      - name: ✅ Validate Version Consistency
        run: |
          # Check version in setup.py
          SETUP_VERSION=$(python setup.py --version)
          echo "Setup.py version: ${SETUP_VERSION}"
          
          # Check version in __init__.py
          INIT_VERSION=$(python -c "import src.telegram_audio_downloader; print(src.telegram_audio_downloader.__version__)")
          echo "Init.py version: ${INIT_VERSION}"
          
          # Validate versions match
          if [[ "${SETUP_VERSION}" != "${{ steps.version.outputs.version }}" ]] || [[ "${INIT_VERSION}" != "${{ steps.version.outputs.version }}" ]]; then
            echo "❌ Version mismatch! Expected: ${{ steps.version.outputs.version }}"
            echo "  setup.py: ${SETUP_VERSION}"
            echo "  __init__.py: ${INIT_VERSION}"
            exit 1
          fi
          
          echo "✅ All versions match: ${{ steps.version.outputs.version }}"

  build-artifacts:
    name: 🏗️ Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: 📦 Install Build Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine wheel
      
      - name: 🏗️ Build Package
        run: |
          python -m build
          
          # Verify build artifacts
          ls -la dist/
          
          # Check package contents
          python -m twine check dist/*
      
      - name: 📤 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
          retention-days: 7

  test-package:
    name: 🧪 Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: build-artifacts
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']
    
    steps:
      - name: 🐍 Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: 🧪 Test Package Installation
        run: |
          # Install from wheel
          python -m pip install --upgrade pip
          pip install dist/*.whl
          
          # Verify import works
          python -c "import telegram_audio_downloader; print('✅ Package imported successfully')"
          
          # Test CLI help
          telegram-audio-downloader --help

  create-release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, test-package]
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: 📝 Generate Changelog
        id: changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Extract changelog for this version
          if [[ -f "CHANGELOG.md" ]]; then
            # Get changelog section for this version
            CHANGELOG_CONTENT=$(awk "/^## \[${VERSION}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md)
            
            if [[ -z "$CHANGELOG_CONTENT" ]]; then
              CHANGELOG_CONTENT="Automated release for version ${VERSION}. See CHANGELOG.md for details."
            fi
          else
            CHANGELOG_CONTENT="Automated release for version ${VERSION}."
          fi
          
          echo "CHANGELOG_CONTENT<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: 🎉 Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.tag }}
          name: "Release ${{ needs.validate-release.outputs.version }}"
          body: |
            # 🎉 Telegram Audio Downloader v${{ needs.validate-release.outputs.version }}
            
            ## 📋 Changes
            ${{ steps.changelog.outputs.CHANGELOG_CONTENT }}
            
            ## 📦 Installation
            
            ### Via pip (Recommended)
            ```bash
            pip install telegram-audio-downloader==${{ needs.validate-release.outputs.version }}
            ```
            
            ### Via GitHub Releases
            Download the `.whl` file from the assets below and install with:
            ```bash
            pip install telegram_audio_downloader-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
            ```
            
            ## 🚀 What's New
            - See [CHANGELOG.md](https://github.com/Elpablo777/Telegram-Audio-Downloader/blob/main/CHANGELOG.md) for detailed changes
            - Full documentation at [Wiki](https://github.com/Elpablo777/Telegram-Audio-Downloader/wiki)
            
            ## 🆘 Support
            - [Documentation](https://github.com/Elpablo777/Telegram-Audio-Downloader/wiki)
            - [Issues](https://github.com/Elpablo777/Telegram-Audio-Downloader/issues)
            - [Discussions](https://github.com/Elpablo777/Telegram-Audio-Downloader/discussions)
          prerelease: ${{ github.event.inputs.prerelease || false }}
          files: |
            dist/*.whl
            dist/*.tar.gz
          generate_release_notes: true

  publish-pypi:
    name: 📦 Publish to PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: ${{ !github.event.inputs.prerelease }}
    environment: pypi
    permissions:
      id-token: write
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: 📦 Publish to PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          verbose: true
          print-hash: true

  publish-test-pypi:
    name: 📦 Publish to Test PyPI
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: ${{ github.event.inputs.prerelease }}
    environment: test-pypi
    permissions:
      id-token: write
    
    steps:
      - name: 📥 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package-distributions
          path: dist/
      
      - name: 📦 Publish to Test PyPI
        uses: pypa/gh-action-pypi-publish@v1.10.3
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true

  docker-release:
    name: 🐳 Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
      
      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 🏷️ Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      
      - name: 🏗️ Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  update-changelog:
    name: 📝 Update Changelog
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: github.event_name == 'workflow_dispatch'
    permissions:
      contents: write
    
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 📝 Update Changelog
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          DATE=$(date +%Y-%m-%d)
          
          # Add new version to changelog if not exists
          if ! grep -q "## \[${VERSION}\]" CHANGELOG.md; then
            # Insert new version after the "# Changelog" header
            sed -i "/# 📝 Changelog/a\\
\\
## [${VERSION}] - ${DATE}\\
\\
### ✨ Added\\
- New features and enhancements\\
\\
### 🐛 Fixed\\
- Bug fixes and improvements\\
\\
### 🔄 Changed\\
- Changes and updates" CHANGELOG.md
            
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git add CHANGELOG.md
            git commit -m "📝 Update CHANGELOG for v${VERSION}" || echo "No changes to commit"
            git push || echo "No changes to push"
          fi
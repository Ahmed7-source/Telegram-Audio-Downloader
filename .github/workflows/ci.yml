name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: 🧪 Tests & Code Quality
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.11', '3.12']

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache Dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .[dev]

    - name: 🎯 Lint with flake8
      run: |
        pip install flake8
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: 🧪 Run Tests with pytest
      run: |
        pip install pytest pytest-cov pytest-asyncio
        pytest --cov=src/telegram_audio_downloader --cov-report=xml --cov-report=html -v

    - name: 📊 Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 🔍 Type Checking with mypy
      run: |
        pip install mypy types-requests
        mypy src/telegram_audio_downloader --ignore-missing-imports
      continue-on-error: true

  docker:
    name: 🐳 Docker Build Test
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🐳 Build Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: telegram-audio-downloader:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security:
    name: 🔒 Security Checks
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔍 Run Bandit Security Linter
      run: |
        pip install bandit
        bandit -r src/telegram_audio_downloader -f json -o bandit-report.json
      continue-on-error: true

    - name: 📊 Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: bandit-security-report
        path: bandit-report.json

  release:
    name: 📦 Create Release
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🏷️ Generate Tag
      id: tag
      run: |
        # Get version from setup.py or pyproject.toml
        VERSION=$(python -c "import sys; sys.path.insert(0, 'src'); from telegram_audio_downloader import __version__; print(__version__)")
        echo "version=v$VERSION" >> $GITHUB_OUTPUT
        echo "Generated version: v$VERSION"

    - name: 📋 Generate Changelog
      id: changelog
      run: |
        # Extract latest changes from CHANGELOG.md
        awk '/## \[1\./{flag=1; next} /## \[/{flag=0} flag' CHANGELOG.md > RELEASE_NOTES.md
        echo "Generated release notes from CHANGELOG.md"

    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.version }}
        release_name: Release ${{ steps.tag.outputs.version }}
        body_path: RELEASE_NOTES.md
        draft: false
        prerelease: false

  notify:
    name: 📢 Notification
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: always()

    steps:
    - name: 📊 Report Status
      run: |
        if [ "${{ needs.test.result }}" = "success" ] && [ "${{ needs.docker.result }}" = "success" ]; then
          echo "✅ All checks passed!"
        else
          echo "❌ Some checks failed!"
          exit 1
        fi